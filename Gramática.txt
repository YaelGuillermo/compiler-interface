(0) SIMBOLO -> BIBLIOTECA_ VARIABLE_ MAIN PROCEDIMIENTO_
(0.1) PROCEDIMIENTO_ -> PROCEDIMIENTO_ F_ID | F_ID
(0.2) VARIABLE_ -> VARIABLE_ F_INIPAR | F_INIPAR
(0.3) BIBLIOTECA_ -> BIBLIOTECA_ EXTERNO | EXTERNO
(0.4) EXTERNO -> BIBLIOTECA | MODULO
(0.5) INSTRUCCIONES -> F_INIPAR | F_ID | F_COMPA | IMPRESION | LLAMADA | 
COMPARADOR2 | BUCLEWH | BUCLEFO | LANZAMIENTO1 | LANZAMIENTO2 | GESTION | 
COMPARADOR1 | LECTURA |  DOSARG | OPCION | ACIERTO 
(0.6) INSTRUCCIONES_ -> INSTRUCCIONES_ INSTRUCCIONES | INSTRUCCIONES

(0.7) F_INIPAR -> INI_PARENTESIS FACT_1
FACT_1 -> ASIGVAR | DECVAR

(0.8) F_ID -> IDENTIFICADOR FACT_2
FACT_2 -> FUNCION | METODO | OP_IGUAL FACT_3
FACT_3 -> LECTURA | DOSARG

(0.9) FCOMPA -> COMPARAR FACT_4
FACT_4 -> COMPARADOR1 | COMPARADOR2

* EJEMPLO		>> 	   includes	     <<		   a		 !
(1) BIBLIOTECA -> CHAR_DOBLEMAYOR LIBRERIA_1 CHAR_DOBLEMENOR IDENTIFICADOR CHAR_EXCLAMATION

* EJEMPLO 		( 	  2		:	int		)		edad	      !	
(2) ASIGVAR -> ASIGVALOR CHAR_DOSPUNTOS TIPO_DATO FIN_PARENTESIS IDENTIFICADOR CHAR_EXCLAMATION
(2.1)ASIGVALOR -> CONST_INTEGER | CONST_FLOAT | CONST_CADENA

* EJEMPLO	       (	int		)	calif		!
(3) DECVAR -> TIPO_DATO FIN_PARENTESIS IDENTIFICADOR CHAR_EXCLAMATION

* EJEMPLO    main	  {	* código *	   }		!
(4) MAIN -> PRINCIPAL INI_LLAVE INSTRUCCIONES_ FIN_LLAVE CHAR_EXCLAMATION

* EJEMPLO	   oparit	def	{	 * código *	return    [suma]      }		!
(5) FUNCION -> DEF_FUN INI_LLAVE INSTRUCCIONES_ RETORNO ENTRECORCH FIN_LLAVE CHAR_EXCLAMATION
(5.1) ENTRECORCH -> INI_CORCHETE PALABRA FIN_CORCHETE
(5.2) PALABRA -> IDENTIFICADOR | CONST_CADENA

*EJEMPLO	oparit	      void	{	* código *	noreturn	}	!
(6) METODO -> DEF_MET INI_LLAVE INSTRUCCIONES_ FUN_NO_RETORNO FIN_LLAVE CHAR_EXCLAMATION

* EJEMPLO	   void    print   ["hola"]	!
(7) IMPRESION -> DEF_MET SALIDA ENTRECORCH CHAR_EXCLAMATION

*EJEMPLO	  def	  oparit	[		]	!
(8) LLAMADA -> ASIGPROC IDENTIFICADOR INI_CORCHETE FIN_CORCHETE CHAR_EXCLAMATION
(8.1) ASIGPROC -> DEF_MET | DEF_FUN

*EJEMPLO	    if      [a;b]>=(*código*)	 elif	     [a;b]>=(*código*)	 else		(	*código*	     )			!
(9) COMPARADOR2 -> ASIGCOMP MASCOMPARADOR2_ SINO_1 INI_PARENTESIS INSTRUCCIONES_ FIN_PARENTESIS CHAR_EXCLAMATION
(9.1) ASIGCOMP -> INI_CORCHETE IDENTIFICADOR CHAR_PUNTOCOMA IDENTIFICADOR FIN_CORCHETE OP_RELACIONAL INI_PARENTESIS INSTRUCCIONES_ FIN_PARENTESIS
(9.2) ASIGCOMPSINO2 -> SINO_2 ASIGCOMP
(9.3) MASCOMPARADOR2_ -> MASCOMPARADOR2_ ASIGCOMPSINO2 | ASIGCOMPSINO2


* EJEMPLO	while	      [		a	   <=	       2	] 	     {	     *código*	      }		    !
(10) BUCLEWH -> MIENTRAS INI_CORCHETE COMPL OP_RELACIONAL COMPL FIN_CORCHETE INI_LLAVE INSTRUCCIONES_ FIN_LLAVE CHAR_EXCLAMATION 
(10.1) COMPL -> IDENTIFICADOR | CONST_INTEGER

*  EJEMPLO	 for	    i	   in	range		(		5		)          : * código *	
(11) BUCLEFO -> PARA IDENTIFICADOR EN TIPO_CONJUNTO INI_PARENTESIS CONST_INTEGER FIN_PARENTESIS RES
(11.1) RES -> CHAR_DOBLEPUNTO INSTRUCCIONES_

* EJEMPLO		try    : * código *     except	  DivError	   : *código*		
(12) LANZAMIENTO1 -> INTENTAR RES EXCEPCION IDENTIFICADOR RES	

* EJEMPLO		try: *código * except DivError: *código*	 else : *código*    finally     : *código*
(13) LANZAMIENTO2 -> LANZAMIENTO1 SINO1 RES FINALIZAR RES

  EJEMPLO   from	math	   import	pi
(14) MODULO -> DESDE IDENTIFICADOR IMPORTA IDENTIFICADOR

*EJEMPLO	with	open		(		)	 as	field	    : *código*
(15) GESTION -> CON IDENTIFICADOR INI_PARENTESIS FIN_PARENTESIS COMO IDENTIFICADOR RES  

* EJEMPLO	       if    numero	    >		0    : *código*   else    : *código*
(16) COMPARADOR1 -> COMPL OP_RELACIONAL COMPL RES SINO1 RES

* EJEMPLO	    nombre	= 	input	     (	      "Ingrese nom"	)
(17) LECTURA -> ENTRADA INI_PARENTESIS CONST_CADENA FIN_PARENTESIS

*EJEMPLO    switch		(	a	)		{    case 	1      	:* código * 	break	    }	
(18) OPCION -> CAMBIAR INI_PARENTESIS COMPL FIN_PARENTESIS INI_LLAVE MASOPCION_ FIN_LLAVE
(18.1) MASOPCION -> CASO CONST_INTEGER RES TERMINAR
(18.2) MASOPCION_ -> MASOPCION_ MASOPCION | MASOPCION

*      EJEMPLO 	potencia	=	pow		(	     a		,    2		)	
(19) DOSARG -> FUN_ALGORITMO INI_PARENTESIS COMPL CHAR_COMA COMPL FIN_PARENTESIS 	

*    EJEMPLO      assert	condicion	,	"Mensaje"
(20) ACIERTO -> FUN_DIAGNOSTICO	IDENTIFICADOR CHAR_COMA	CONST_CADENA 